name: Deploy to VPS

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: false
        default: 'production'
        type: choice
        options:
          - production
          - staging
      force_rebuild:
        description: 'Force rebuild without cache'
        required: false
        default: false
        type: boolean

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint --if-present

    - name: Run type check
      run: npm run type-check --if-present

    - name: Run tests
      run: npm run test --if-present

    - name: Build project
      run: npm run build
      env:
        CI: true
        NODE_ENV: production

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-files
        path: dist/
        retention-days: 1

  deploy:
    name: Deploy to VPS
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        
        # Test connectivity first
        echo "Testing connectivity to ${{ secrets.VPS_HOST }}:${{ secrets.VPS_SSH_PORT }}"
        nc -zv ${{ secrets.VPS_HOST }} ${{ secrets.VPS_SSH_PORT }} || echo "Port check failed"
        
        # Add host key (try with custom port)
        ssh-keyscan -H ${{ secrets.VPS_HOST }} -p ${{ secrets.VPS_SSH_PORT }} >> ~/.ssh/known_hosts || echo "Host key scan failed, proceeding anyway"

    - name: Create deployment package
      run: |
        # Create deployment directory
        mkdir -p deployment
        
        # Copy necessary files
        cp Dockerfile deployment/
        cp docker-compose.yml deployment/
        cp -r nginx deployment/
        cp package*.json deployment/
        cp -r src deployment/
        cp -r public deployment/
        cp *.config.* deployment/ 2>/dev/null || true
        cp tsconfig.json deployment/ 2>/dev/null || true
        cp index.html deployment/ 2>/dev/null || true
        
        # Create archive
        tar -czf deployment.tar.gz -C deployment .
        
    - name: Deploy to VPS
      run: |
        # Upload deployment package
        scp -i ~/.ssh/id_rsa -P ${{ secrets.VPS_SSH_PORT }} deployment.tar.gz ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/tmp/
        
        # Execute deployment script on VPS
        ssh -i ~/.ssh/id_rsa -p ${{ secrets.VPS_SSH_PORT }} ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
          set -e
          
          # Configuration
          APP_DIR="${{ secrets.VPS_APP_DIR }}"
          BACKUP_DIR="${{ secrets.VPS_BACKUP_DIR }}"
          
          # Create directories
          mkdir -p "$APP_DIR"
          mkdir -p "$BACKUP_DIR"
          mkdir -p "$APP_DIR/nginx/logs"
          
          # Backup current deployment
          if [ -d "$APP_DIR" ] && [ "$(ls -A $APP_DIR)" ]; then
            echo "Creating backup..."
            cp -r "$APP_DIR" "$BACKUP_DIR/backup-$(date +%Y%m%d-%H%M%S)" || true
          fi
          
          # Extract new deployment
          cd "$APP_DIR"
          tar -xzf /tmp/deployment.tar.gz
          
          # Create external network if not exists
          docker network create portfolio-network || true
          
          # Stop and remove old containers
          docker-compose down || true
          
          # Build and start new containers
          docker-compose build --no-cache
          docker-compose up -d
          
          # Cleanup
          rm -f /tmp/deployment.tar.gz
          
          # Show status
          docker-compose ps
          
          echo "Deployment completed successfully!"
        EOF

    - name: Cleanup SSH
      if: always()
      run: |
        rm -f ~/.ssh/id_rsa

  notify:
    name: Notify Deployment Status
    needs: [build, deploy]
    runs-on: ubuntu-latest
    if: always() && github.ref == 'refs/heads/main'

    steps:
    - name: Notify Success
      if: needs.deploy.result == 'success'
      run: |
        echo "✅ Deployment successful!"
        # Add webhook notification here if needed
        # curl -X POST ${{ secrets.DISCORD_WEBHOOK }} -d '{"content":"✅ Portfolio deployed successfully!"}'

    - name: Notify Failure
      if: needs.deploy.result == 'failure'
      run: |
        echo "❌ Deployment failed!"
        # Add webhook notification here if needed
        # curl -X POST ${{ secrets.DISCORD_WEBHOOK }} -d '{"content":"❌ Portfolio deployment failed!"}' 